{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/admin/Desktop/goit/react-native/Reacr-native-IOS/node_modules/@expo/vector-icons/build/createIconSet.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n  var font = _defineProperty({}, fontName, expoAssetId);\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n    var _super = _createSuper(Icon);\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      _this = _super.apply(this, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this._mounted = true;\n              if (this.state.fontIsLoaded) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(font));\n            case 4:\n              this._mounted && this.setState({\n                fontIsLoaded: true\n              });\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        if (!this.state.fontIsLoaded) {\n          return _jsx(Text, {});\n        }\n        return _jsx(RNVIconComponent, _objectSpread({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props));\n      }\n    }]);\n    return Icon;\n  }(React.Component), _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"names":["Font","React","Text","createIconSet","createIconButtonComponent","jsx","_jsx","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","_defineProperty","RNVIconComponent","_a","_React$Component","_inherits","Icon","_super","_createSuper","_this","_classCallCheck","_mounted","state","fontIsLoaded","isLoaded","_createClass","key","value","componentDidMount","_regeneratorRuntime","async","componentDidMount$","_context","prev","next","awrap","loadAsync","setState","stop","Promise","componentWillUnmount","setNativeProps","props","_icon","render","_this2","_objectSpread","ref","view","Component","propTypes","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont"],"sources":["/Users/admin/Desktop/goit/react-native/Reacr-native-IOS/node_modules/@expo/vector-icons/src/createIconSet.tsx"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport { Text, TextProps, TouchableHighlightProps, ViewProps } from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconButtonProps<GLYPHS extends string> extends ViewProps, TouchableHighlightProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number }\n\nexport interface Icon<G extends string, FN extends string> {\n  propTypes: any;\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function<G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}