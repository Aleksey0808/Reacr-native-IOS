{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(orientationLock) {\n  return _regeneratorRuntime.async(function allowAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n        _context.next = 3;\n        return _regeneratorRuntime.awrap(lockAsync(orientationLock));\n      case 3:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function lockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function lockAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        if (ExpoScreenOrientation.lockAsync) {\n          _context2.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n      case 2:\n        orientationLocks = Object.values(OrientationLock);\n        if (orientationLocks.includes(orientationLock)) {\n          _context2.next = 5;\n          break;\n        }\n        throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n      case 5:\n        if (!(orientationLock === OrientationLock.OTHER)) {\n          _context2.next = 7;\n          break;\n        }\n        return _context2.abrupt(\"return\");\n      case 7:\n        _context2.next = 9;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockAsync(orientationLock));\n      case 9:\n        _lastOrientationLock = orientationLock;\n      case 10:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function lockPlatformAsync(options) {\n  var screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb, platformOrientationParam, orientations, _iterator, _step, orientation, webOrientationLocks;\n  return _regeneratorRuntime.async(function lockPlatformAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (ExpoScreenOrientation.lockPlatformAsync) {\n          _context3.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n      case 2:\n        screenOrientationConstantAndroid = options.screenOrientationConstantAndroid, screenOrientationArrayIOS = options.screenOrientationArrayIOS, screenOrientationLockWeb = options.screenOrientationLockWeb;\n        if (!(Platform.OS === 'android' && screenOrientationConstantAndroid)) {\n          _context3.next = 9;\n          break;\n        }\n        if (!isNaN(screenOrientationConstantAndroid)) {\n          _context3.next = 6;\n          break;\n        }\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n      case 6:\n        platformOrientationParam = screenOrientationConstantAndroid;\n        _context3.next = 28;\n        break;\n      case 9:\n        if (!(Platform.OS === 'ios' && screenOrientationArrayIOS)) {\n          _context3.next = 23;\n          break;\n        }\n        if (Array.isArray(screenOrientationArrayIOS)) {\n          _context3.next = 12;\n          break;\n        }\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n      case 12:\n        orientations = Object.values(Orientation);\n        _iterator = _createForOfIteratorHelperLoose(screenOrientationArrayIOS);\n      case 14:\n        if ((_step = _iterator()).done) {\n          _context3.next = 20;\n          break;\n        }\n        orientation = _step.value;\n        if (orientations.includes(orientation)) {\n          _context3.next = 18;\n          break;\n        }\n        throw new TypeError(\"lockPlatformAsync iOS platform: \" + orientation + \" is not a valid Orientation\");\n      case 18:\n        _context3.next = 14;\n        break;\n      case 20:\n        platformOrientationParam = screenOrientationArrayIOS;\n        _context3.next = 28;\n        break;\n      case 23:\n        if (!(Platform.OS === 'web' && screenOrientationLockWeb)) {\n          _context3.next = 28;\n          break;\n        }\n        webOrientationLocks = Object.values(WebOrientationLock);\n        if (webOrientationLocks.includes(screenOrientationLockWeb)) {\n          _context3.next = 27;\n          break;\n        }\n        throw new TypeError(\"Invalid Web Orientation Lock: \" + screenOrientationLockWeb);\n      case 27:\n        platformOrientationParam = screenOrientationLockWeb;\n      case 28:\n        if (platformOrientationParam) {\n          _context3.next = 30;\n          break;\n        }\n        throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n      case 30:\n        _context3.next = 32;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam));\n      case 32:\n        _lastOrientationLock = OrientationLock.OTHER;\n      case 33:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function unlockAsync() {\n  return _regeneratorRuntime.async(function unlockAsync$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (ExpoScreenOrientation.unlockAsync) {\n          _context4.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n      case 2:\n        _context4.next = 4;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.unlockAsync());\n      case 4:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationAsync() {\n  return _regeneratorRuntime.async(function getOrientationAsync$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        if (ExpoScreenOrientation.getOrientationAsync) {\n          _context5.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n      case 2:\n        _context5.next = 4;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationAsync());\n      case 4:\n        return _context5.abrupt(\"return\", _context5.sent);\n      case 5:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function getOrientationLockAsync() {\n  return _regeneratorRuntime.async(function getOrientationLockAsync$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        if (ExpoScreenOrientation.getOrientationLockAsync) {\n          _context6.next = 2;\n          break;\n        }\n        return _context6.abrupt(\"return\", _lastOrientationLock);\n      case 2:\n        _context6.next = 4;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.getOrientationLockAsync());\n      case 4:\n        return _context6.abrupt(\"return\", _context6.sent);\n      case 5:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function getPlatformOrientationLockAsync() {\n  var platformOrientationLock;\n  return _regeneratorRuntime.async(function getPlatformOrientationLockAsync$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        _context7.next = 2;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.getPlatformOrientationLockAsync());\n      case 2:\n        platformOrientationLock = _context7.sent;\n        if (!(Platform.OS === 'android')) {\n          _context7.next = 7;\n          break;\n        }\n        return _context7.abrupt(\"return\", {\n          screenOrientationConstantAndroid: platformOrientationLock\n        });\n      case 7:\n        if (!(Platform.OS === 'ios')) {\n          _context7.next = 11;\n          break;\n        }\n        return _context7.abrupt(\"return\", {\n          screenOrientationArrayIOS: platformOrientationLock\n        });\n      case 11:\n        if (!(Platform.OS === 'web')) {\n          _context7.next = 15;\n          break;\n        }\n        return _context7.abrupt(\"return\", {\n          screenOrientationLockWeb: platformOrientationLock\n        });\n      case 15:\n        return _context7.abrupt(\"return\", {});\n      case 16:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function supportsOrientationLockAsync(orientationLock) {\n  var orientationLocks;\n  return _regeneratorRuntime.async(function supportsOrientationLockAsync$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        if (ExpoScreenOrientation.supportsOrientationLockAsync) {\n          _context8.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n      case 2:\n        orientationLocks = Object.values(OrientationLock);\n        if (orientationLocks.includes(orientationLock)) {\n          _context8.next = 5;\n          break;\n        }\n        throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n      case 5:\n        _context8.next = 7;\n        return _regeneratorRuntime.awrap(ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock));\n      case 7:\n        return _context8.abrupt(\"return\", _context8.sent);\n      case 8:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function doesSupportAsync(orientationLock) {\n  return _regeneratorRuntime.async(function doesSupportAsync$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n        _context9.next = 3;\n        return _regeneratorRuntime.awrap(supportsOrientationLockAsync(orientationLock));\n      case 3:\n        return _context9.abrupt(\"return\", _context9.sent);\n      case 4:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \" + listener);\n  }\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function _callee(update) {\n    var orientationInfo, orientationLock, _await$Promise$all, _await$Promise$all2;\n    return _regeneratorRuntime.async(function _callee$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          if (!(Platform.OS === 'ios' || Platform.OS === 'web')) {\n            _context10.next = 5;\n            break;\n          }\n          orientationLock = update.orientationLock;\n          orientationInfo = update.orientationInfo;\n          _context10.next = 11;\n          break;\n        case 5:\n          _context10.next = 7;\n          return _regeneratorRuntime.awrap(Promise.all([getOrientationLockAsync(), getOrientationAsync()]));\n        case 7:\n          _await$Promise$all = _context10.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n          orientationLock = _await$Promise$all2[0];\n          orientationInfo = _await$Promise$all2[1];\n        case 11:\n          listener({\n            orientationInfo: orientationInfo,\n            orientationLock: orientationLock\n          });\n        case 12:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, null, null, null, Promise);\n  });\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","ExpoScreenOrientation","Orientation","OrientationLock","SizeClassIOS","WebOrientationLock","_orientationChangeEmitter","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","allow","orientationLock","console","warn","lockAsync","allowAsync","_regeneratorRuntime","async","allowAsync$","_context","prev","next","awrap","stop","Promise","orientationLocks","lockAsync$","_context2","Object","values","includes","TypeError","OTHER","abrupt","lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","orientations","_iterator","_step","orientation","webOrientationLocks","lockPlatformAsync$","_context3","OS","isNaN","Array","isArray","_createForOfIteratorHelperLoose","done","value","unlockAsync","unlockAsync$","_context4","getOrientationAsync","getOrientationAsync$","_context5","sent","getOrientationLockAsync","getOrientationLockAsync$","_context6","getPlatformOrientationLockAsync","platformOrientationLock","getPlatformOrientationLockAsync$","_context7","supportsOrientationLockAsync","supportsOrientationLockAsync$","_context8","doesSupportAsync","doesSupportAsync$","_context9","getEventName","addOrientationChangeListener","listener","subscription","addListener","_callee","update","orientationInfo","_await$Promise$all","_await$Promise$all2","_callee$","_context10","all","_slicedToArray","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub"],"sources":["/Users/admin/Desktop/goit/react-native/Reacr-native-IOS/node_modules/expo/src/ScreenOrientation/ScreenOrientation.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}